{"name":"Stickylistheaders","tagline":"An android library for section headers that stick to the top","body":"StickyListHeaders\r\n=================\r\nStickyListHeaders is an Android library that makes it easy to integrate section headers in your `ListView`. These section headers stick to the top like in the new People app of Android 4.0 Ice Cream Sandwich. This behavior is also found in lists with sections on iOS devices. This library can also be used without the sticky functionality if you just want section headers.\r\n\r\nStickyListHeaders actively supports android versions 2.3 (gingerbread) and above.\r\nThat said, it works all the way down to 2.1 but is not actively tested or working perfectly.\r\n\r\nHere is a short gif showing the functionality you get with this library:\r\n\r\n![alt text](https://github.com/emilsjolander/StickyListHeaders/raw/master/demo.gif \"Demo gif\")\r\n\r\n\r\nGoal\r\n----\r\nThe goal of this project is to deliver a high performance replacement to `ListView`. You should with minimal effort and time be able to add section headers to a list. This should be done via a simple to use API without any special features. This library will always priorities general use cases over special ones. This means that the library will add very few public methods to the standard `ListView` and will not try to work for every use case. While I will want to support even narrow use cases I will not do so if it compromises the API or any other feature.\r\n\r\n\r\nInstalling\r\n---------------\r\n###Maven\r\nAdd the following maven dependency exchanging `x.x.x` for the latest release.\r\n```XML\r\n<dependency>\r\n    <groupId>se.emilsjolander</groupId>\r\n    <artifactId>stickylistheaders</artifactId>\r\n    <version>x.x.x</version>\r\n</dependency>\r\n```\r\n\r\n###Gradle\r\nAdd the following gradle dependency exchanging `x.x.x` for the latest release.\r\n```groovy\r\ndependencies {\r\n    compile 'se.emilsjolander:stickylistheaders:x.x.x'\r\n}\r\n```\r\n\r\n###Cloning\r\nFirst of all you will have to clone the library.\r\n```shell\r\ngit clone https://github.com/emilsjolander/StickyListHeaders.git\r\n```\r\n\r\nNow that you have the library you will have to import it into Android Studio.\r\nIn Android Studio navigate the menus like this.\r\n```\r\nFile -> Import Project ...\r\n```\r\nIn the following dialog navigate to StickyListHeaders which you cloned to your computer in the previous steps and select the `build.gradle`.\r\n\r\nGetting Started\r\n---------------\r\n###Base usage\r\n\r\nOk lets start with your activities or fragments xml file. It might look something like this.\r\n```xml\r\n<se.emilsjolander.stickylistheaders.StickyListHeadersListView\r\n    android:id=\"@+id/list\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"/>\r\n```\r\n\r\nNow in your activities `onCreate()` or your fragments `onCreateView()` you would want to do something like this\r\n```java\r\nStickyListHeadersListView stickyList = (StickyListHeadersListView) findViewById(R.id.list);\r\nMyAdapter adapter = new MyAdapter(this);\r\nstickyList.setAdapter(adapter);\r\n```\r\n\r\n`MyAdapter` in the above example would look something like this if your list was a list of countries where each header was for a letter in the alphabet.\r\n```java\r\npublic class MyAdapter extends BaseAdapter implements StickyListHeadersAdapter {\r\n\r\n    private String[] countries;\r\n    private LayoutInflater inflater;\r\n\r\n    public MyAdapter(Context context) {\r\n        inflater = LayoutInflater.from(context);\r\n        countries = context.getResources().getStringArray(R.array.countries);\r\n    }\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return countries.length;\r\n    }\r\n\r\n    @Override\r\n    public Object getItem(int position) {\r\n        return countries[position];\r\n    }\r\n\r\n    @Override\r\n    public long getItemId(int position) {\r\n        return position;\r\n    }\r\n\r\n    @Override \r\n    public View getView(int position, View convertView, ViewGroup parent) {\r\n        ViewHolder holder;\r\n\r\n        if (convertView == null) {\r\n            holder = new ViewHolder();\r\n            convertView = inflater.inflate(R.layout.test_list_item_layout, parent, false);\r\n            holder.text = (TextView) convertView.findViewById(R.id.text);\r\n            convertView.setTag(holder);\r\n        } else {\r\n            holder = (ViewHolder) convertView.getTag();\r\n        }\r\n\r\n        holder.text.setText(countries[position]);\r\n\r\n        return convertView;\r\n    }\r\n\r\n    @Override \r\n    public View getHeaderView(int position, View convertView, ViewGroup parent) {\r\n        HeaderViewHolder holder;\r\n        if (convertView == null) {\r\n            holder = new HeaderViewHolder();\r\n            convertView = inflater.inflate(R.layout.header, parent, false);\r\n            holder.text = (TextView) convertView.findViewById(R.id.text);\r\n            convertView.setTag(holder);\r\n        } else {\r\n            holder = (HeaderViewHolder) convertView.getTag();\r\n        }\r\n        //set header text as first char in name\r\n        String headerText = \"\" + countries[position].subSequence(0, 1).charAt(0);\r\n        holder.text.setText(headerText);\r\n        return convertView;\r\n    }\r\n\r\n    @Override\r\n    public long getHeaderId(int position) {\r\n        //return the first character of the country as ID because this is what headers are based upon\r\n        return countries[position].subSequence(0, 1).charAt(0);\r\n    }\r\n\r\n    class HeaderViewHolder {\r\n        TextView text;\r\n    }\r\n\r\n    class ViewHolder {\r\n        TextView text;\r\n    }\r\n    \r\n}\r\n```\r\n\r\nThat's it! Look through the API docs below to get know about things to customize and if you have any problems getting started please open an issue as it probably means the getting started guide need some improvement!\r\n\r\n###Styling\r\n\r\nYou can apply your own theme to `StickyListHeadersListView`s. Say you define a style called `Widget.MyApp.ListView` in values/styles.xml:\r\n```xml\r\n<resources>\r\n    <style name=\"Widget.MyApp.ListView\" parent=\"@android:style/Widget.ListView\">\r\n        <item name=\"android:paddingLeft\">@dimen/vertical_padding</item>\r\n        <item name=\"android:paddingRight\">@dimen/vertical_padding</item>\r\n    </style>\r\n</resources>\r\n```\r\n\r\nYou can then apply this style to all `StickyListHeadersListView`s by adding something like this to your theme (e.g. values/themes.xml):\r\n```xml\r\n<resources>\r\n    <style name=\"Theme.MyApp\" parent=\"android:Theme.NoTitleBar\">\r\n        <item name=\"stickyListHeadersListViewStyle\">@style/Widget.MyApp.ListView</item>\r\n    </style>\r\n</resources>\r\n```\r\n\r\n###Expandable support\r\nNow, you can use `ExpandableStickyListHeadersListView` to expand/collapse subitems.\r\nxml first\r\n```xml\r\n<se.emilsjolander.stickylistheaders.ExpandableStickyListHeadersListView\r\n    android:id=\"@+id/list\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"/>\r\n```\r\nThen you need to setup your listview on `onCreate()` or `onCreateView()`ï¼š\r\n```java\r\nExpandableStickyListHeadersListView expandableStickyList = (ExpandableStickyListHeadersListView) findViewById(R.id.list);\r\nStickyListHeadersAdapter adapter = new MyAdapter(this);\r\nexpandableStickyList.setAdapter(adapter);\r\nexpandableStickyList.setOnHeaderClickListener(new StickyListHeadersListView.OnHeaderClickListener() {\r\n            @Override\r\n            public void onHeaderClick(StickyListHeadersListView l, View header, int itemPosition, long headerId, boolean currentlySticky) {\r\n                if(expandableStickyList.isHeaderCollapsed(headerId)){\r\n                    expandableStickyList.expand(headerId);\r\n                }else {\r\n                    expandableStickyList.collapse(headerId);\r\n                }\r\n            }\r\n        });\r\n```\r\nAs you see, MyAdapter is just a StickyListHeadersAdapter which is mentioned in the previous section.\r\nYou needn't do any more extra operations.\r\n\r\nThere are three important functions:\r\n`isHeaderCollapsed(long headerId)`,`expand(long headerId)` and `collapse(long headerId)`.\r\n\r\nThe function `isHeaderCollapsed` is used to check whether the subitems belonging to the header have collapsed.\r\nYou can call `expand` or `collapse` method to hide or show subitems.\r\nYou can also define a AnimationExecutor which implements `ExpandableStickyListHeadersListView.IAnimationExecutor`,\r\nand put it into the ExpandableStickyListHeadersListView by `setAnimExecutor` method,if you want more fancy animation when hiding or showing subitems.\r\n\r\n\r\nUpgrading from 1.x versions\r\n---------------------------\r\nFirst of all the package name has changed from `com.emilsjolander.components.stickylistheaders` -> `se.emilsjolander.stickylistheaders` so update all your imports and xml files using StickyListHeaders!\r\n\r\nIf you are Upgrading from a version prior to 2.x you might run into the following problems.\r\n1. `StickyListHeadersListView` is no longer a `ListView` subclass. This means that it cannot be passed into a method expecting a ListView. You can retrieve an instance of the `ListView` via `getWrappedList()` but use this with caution as things will probably break if you start setting things directly on that list.\r\n2. Because `StickyListHeadersListView` is no longer a `ListView` it does not support all the methods. I have implemented delegate methods for all the usual methods and gladly accept pull requests for more.\r\n\r\nAPI\r\n---\r\n###StickyListHeadersAdapter\r\n```java\r\npublic interface StickyListHeadersAdapter extends ListAdapter {\r\n    View getHeaderView(int position, View convertView, ViewGroup parent);\r\n    long getHeaderId(int position);\r\n}\r\n```\r\nYour adapter must implement this interface to function with `StickyListHeadersListView`.\r\n`getHeaderId()` must return a unique integer for every section. A valid implementation for a list with alphabetical sections is the return the char value of the section that `position` is a part of.\r\n\r\n`getHeaderView()` works exactly like `getView()` in a regular `ListAdapter`.\r\n\r\n\r\n###StickyListHeadersListView\r\nHeaders are sticky by default but that can easily be changed with this setter. There is of course also a matching getter for the sticky property.\r\n```java\r\npublic void setAreHeadersSticky(boolean areHeadersSticky);\r\npublic boolean areHeadersSticky();\r\n```\r\n\r\nA `OnHeaderClickListener` is the header version of OnItemClickListener. This is the setter for it and the interface of the listener. The currentlySticky boolean flag indicated if the header that was clicked was sticking to the top at the time it was clicked.\r\n```java\r\npublic void setOnHeaderClickListener(OnHeaderClickListener listener);\r\n\r\npublic interface OnHeaderClickListener {\r\n    public void onHeaderClick(StickyListHeadersListView l, View header, int itemPosition, long headerId, boolean currentlySticky);\r\n}\r\n```\r\n\r\nA `OnStickyHeaderOffsetChangedListener` is a Listener used for listening to when the sticky header slides out of the screen. The offset parameter will slowly grow to be the same size as the headers height. Use the listeners callback to transform the header in any way you see fit, the standard android contacts app dims the text for example.\r\n```java\r\npublic void setOnStickyHeaderOffsetChangedListener(OnStickyHeaderOffsetChangedListener listener);\r\n\r\npublic interface OnStickyHeaderOffsetChangedListener {\r\n    public void onStickyHeaderOffsetChanged(StickyListHeadersListView l, View header, int offset);\r\n}\r\n```\r\n\r\nA `OnStickyHeaderChangedListener` listens for changes to the header.  This enables UI elements elsewhere to react to the current header (e.g. if each header is a date, then the rest of the UI can update when you scroll to a new date).\r\n```java\r\npublic void setOnStickyHeaderChangedListener(OnStickyHeaderChangedListener listener);\r\n\r\npublic interface OnStickyHeaderChangedListener {\r\n    void onStickyHeaderChanged(StickyListHeadersListView l, View header, int itemPosition, long headerId);\r\n}\r\n```\r\n\r\nHere are two methods added to the API for inspecting the children of the underlying `ListView`. I could not override the normal `getChildAt()` and `getChildCount()` methods as that would mess up the underlying measurement system of the `FrameLayout` wrapping the `ListView`.\r\n```java\r\npublic View getListChildAt(int index);\r\npublic int getListChildCount();\r\n```\r\n\r\nThis is a setter and getter for an internal attribute that controls if the list should be drawn under the stuck header. The default value is true. If you do not want to see the list scroll under your header you will want to set this attribute to `false`.\r\n```java\r\npublic void setDrawingListUnderStickyHeader(boolean drawingListUnderStickyHeader);\r\npublic boolean isDrawingListUnderStickyHeader();\r\n```\r\n\r\nIf you are using a transparent action bar the following getter+setter will be very helpful. Use them to set the position of the sticky header from the top of the view.\r\n```java\r\npublic void setStickyHeaderTopOffset(int stickyHeaderTopOffset);\r\npublic int getStickyHeaderTopOffset();\r\n```\r\n\r\nGet the amount of overlap the sticky header has when position in on the top of the list.\r\n```java\r\npublic int getHeaderOverlap(int position);\r\n```\r\n\r\nContributing\r\n------------\r\nContributions are very welcome. Now that this library has grown in popularity i have a hard time keeping upp with all the issues while tending to a multitude of other projects as well as school. So if you find a bug in the library or want a feature and think you can fix it yourself, fork + pull request and i will greatly appreciate it!\r\n\r\nI love getting pull requests for new features as well as bugs. However, when it comes to new features please also explain the use case and way you think the library should include it. If you don't want to start coding a feature without knowing if the feature will have chance of being included, open an issue and we can discuss the feature!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}